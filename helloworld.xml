https://github.com/jwlee98/APIConnect/blob/ee7caa97a137d9511811ede2abb0061db57e0cad/Sample%20APIs/testloan_2.0.0.yaml

https://github.com/steve-a-edwards/we752/blob/master/Exercise-4-GWS/DecryptCompactJWE.js

   <xsl:variable name="timeStamp" select="number(dp:time-value())"/>
 <xsl:variable name="millionSeconds" select="substring($timeStamp, 11, 3)"/>
=============

var jose = require('jose');

// get the input from the request

session.input.readAsBuffer(function(readAsBufferError, jsonData) {
    if (readAsBufferError) {
        console.error('Error on readAsBuffer: ' + readAsBufferError);
    } else {

        try {
            debugger;

            // Create a JWEHeader instance and specify the encryption algorithm to use

            var jweHdr = jose.createJWEHeader('A128CBC-HS256');

            // Set the CEK encryption algorithm header parameter in the protected header

            jweHdr.setProtected('alg', 'RSA1_5');

            // Set the key configuration object to process the encrypted key

            jweHdr.setKey('Emi-cert');

            // Specify which jweHeader defines how to encrypt this message then
            // update the jweEncrypter with the message to be encrypted then
            // encrypt the JWE Encryption object using the compact serialization
            // output_format as specified
            jose.createJWEEncrypter(jweHdr).update(jsonData).encrypt('compact', function(error, jweCompactObj) {
                if (error) {
                    // An error occurred during the encrypt process and is passed back
                    // via the error parameter since .encrypt is an asynchronous call
                    // write the error to the output context
                    session.reject(error);
                    return;
                } else {
                    session.output.write(jweCompactObj);
                }
            }); // encrypt function
        } catch (e) {
            session.reject("EncryptCompactJWE.js error: " + e);
            return;
        }
    }
}); // readAsBuffer
============

var sm = require('service-metadata');
var hm = require('header-metadata');
sm.setVar('var://service/mpgw/skip-backside', true);
========

// XML input converted to JSON output extracting XML components using XPath function.
// This demonstrates GatewayScript (ECMA) XML to JSON.
// Author: Steve Edwards, Escala Ltd.
// Date  : 2015-11-17.
// Note  : this code is for demonstration purposes only, not production - level.
// Read the input as XML document

var transform = require('transform');

session.input.readAsXML(function (error, doc) {
	  if (error) {
	    // handle error
	    session.output.write (error.errorMessage);
	  }
	  else {
		  var options = {
				  'expression': '//ns1:book[1]/ns1:title/text()',
	              'xmldom': doc,
	              'namespace': { 'ns1': 'http://publisher.com/books' }
	      };           
		  transform.xpath(options, function(err, xmlNodeList) {
			  if (err) {
				  session.out.write(err);
			  }
			  else {
				  //  xmlNodeList = 'JavaScript'
				  var json_output = {};
				  var option = { omitXmlDeclaration: true } ;
				  json_output.firstTitle = XML.stringify(option, xmlNodeList);
				  // {"firstTitle": "JavaScript"}
				  session.output.write(json_output);
			  }
		  });
	  }
});
/*
<books xmlns="http://publisher.com/books">
    <book><title>JavaScript</title><price>22.99</price></book>
    <book><title>XSLT</title><price>35</price></book>
</books>

curl -d '<books xmlns="http://publisher.com/books"><book><title>JavaScript</title><price>22.99</price></book><book><title>XSLT</title><price>35</price></book></books>' http://192.168.1.72:8082/xpath-transform
Output: {"firstTitle":"JavaScript"}
*/
----------
visa  encrypt


var jose = require('jose');
// get the input from the request
session.input.readAsBuffer(function(readAsBufferError, jsonData) {
	if (readAsBufferError) {
		console.error('Error on readAsBuffer: ' + readAsBufferError);
	} else {
		var plaintext = jsonData;
		try {
			// Create JWE header that specifies content encryption algorithm
			var jweHdr = jose.createJWEHeader('A128CBC-HS256');
			// Add first recipient, identifying the cert object name, and
			// encryption algo for the CEK, and JSON object with "kid" for Emi 
			var EmiKidHdr = {"kid":"Emi"};
			jweHdr.addRecipient('Emi-cert', 'RSA1_5', EmiKidHdr);
			// Add second recipient
			var ErinKidHdr = { "kid":"Erin"};
			jweHdr.addRecipient('Erin-cert', 'RSA-OAEP', ErinKidHdr);
			// Create JWEEncrypter, load it with the plaintext, encrypt it
			// formatted as JSON serialized
			jose.createJWEEncrypter(jweHdr).update(plaintext).encrypt(
					'json',
					function(error, jweJSONObj) {
						if (error) {
							// An error occurred during the encrypt process
							session.reject(error.errorMessage);
							return;
						} else {
							// Encryption was successful
							console.debug('JSON-serialized object: '
									+ jweJSONObj);
							session.output.write(jweJSONObj);
						}
					});
		} catch (e) {
			session.reject("BuildMultiRecipientJWE.js error: " + e);
			return;
		}
	}
});





----------------


var someJSON = {"hello": "This is", "there": "JSON"};

// Alternative
// var someJSON = new Object();
// someJSON.hello = "This is";
// someJSON.there = "JSON";

session.output.write(someJSON);

/* Sample output:
{
    "hello": "This is",
    "there": "JSON"
}
*/
-------------------

		//print current headers
		var hm = require('header-metadata');
		console.debug("Current headers %j", hm.current.headers);
		
		//print service variables
		console.debug("Input size is:" + sm.inputSize );
		console.debug("Inbound URL:" + sm.getVar('var://service/URL-in') );
		
		//print input JSON message
		console.debug("JSON Request is %s", queryparms);
	}
// construct SOAP request message
session.output.write(
	"<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" "
	+ "xmlns:fly=\"http://www.ibm.com/datapower/FLY/BaggageService/\">" 
	+ "<soapenv:Header/>"
	+ "<soapenv:Body>"
 	+ "<fly:BaggageStatusRequest>"
       	+ "<fly:refNumber>" + refNo + "</fly:refNumber>"
       	+ "<fly:lastName>" + lastName + "</fly:lastName>"
   	+ "</fly:BaggageStatusRequest>"
  	+ "</soapenv:Body>"
	+ "</soapenv:Envelope>"
	);

---------
  <xsl:output method="xml"/>

  <xsl:template match="/">
    <xsl:copy-of select="."/>
  </xsl:template>

</xsl:stylesheet>
-----------
// Read the input as a JSON object and convert to SOAP message
console.debug("Starting BaggageJson2Soap");

session.input.readAsJSON(function(error,json) {
	if (error) {
		// an error occurred when parsing the content, e.g. invalid JSON object
		session.output.write("oops error " + JSON.stringify(error.toString()));
	} else {
		
debugger;
		var refNo = json.refNumber;
		var lastName = json.lastName;
		
		console.info("Received request from %s and referenece number is %i", lastName, refNo);
		
		// Debug level is a stylesheet parameter which is configurable in JS action
		// Check debug level , if debug level is above 5, will print request headers and service variables
		// Default value is 0
		if (!session.parameters.debugLevel) 
			session.parameters.debugLevel = 0;
		if (session.parameters.debugLevel >= 5)
		{
			//print current headers
			var hm = require('header-metadata');
			console.debug("Current headers %j", hm.current.headers);
			
			//print service variables
			var sm = require('service-metadata');
			console.debug("Input size is:" + sm.inputSize );
			console.debug("Inbound URL:" + sm.getVar('var://service/URL-in') );
			
			//print input JSON message
			console.debug("JSON Request is %j", json);
		}
		
		session.output.write(
			"<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" "
			+ "xmlns:fly=\"http://www.ibm.com/datapower/FLY/BaggageService/\">" 
	   		+ "<soapenv:Header/>"
	   		+ "<soapenv:Body>"
	      		+ "<fly:BaggageStatusRequest>"
	         	+ "<fly:refNumber>" + refNo + "</fly:refNumber>"
	         	+ "<fly:lastName>" + lastName + "</fly:lastName>"
	      		+ "</fly:BaggageStatusRequest>"
	   		+ "</soapenv:Body>"
			+ "</soapenv:Envelope>"
		);
	}
});
