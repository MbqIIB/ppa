https://github.com/jwlee98/APIConnect/blob/ee7caa97a137d9511811ede2abb0061db57e0cad/Sample%20APIs/testloan_2.0.0.yaml
HMAC
https://github.com/ChrisPhillips-cminion/ChrisPhillips-cminion.github.io/blob/f45367d0519bebf345f2926f3951162ec6da6262/_posts/2019-12-09-WhatsAppToTwillo.md


https://github.com/steve-a-edwards/we752/blob/master/Exercise-4-GWS/DecryptCompactJWE.js
https://github.com/mohan1750/Datapower/blob/641a691ad3fa8fc9bbb372fab4ddc08b77f10879/New_POC/SSHttpRqRply_RestToRest/01/ErrorProcessor.xsl

<xsl:if test="@structure and not(@structure='hierarchical')">
							<xsl:attribute name="structure"><xsl:value-of select="@structure"/></xsl:attribute>
						</xsl:if>
   <xsl:variable name="timeStamp" select="number(dp:time-value())"/>
 <xsl:variable name="millionSeconds" select="substring($timeStamp, 11, 3)"/>

xsl:choose>
			<xsl:when test="/*[local-name() = 'Envelope']/*[local-name() = 'Body']/*[1]">
				<xsl:copy-of  select="/*[local-name() = 'Envelope']/*[local-name() = 'Body']/*[1]"/>

(//*[1])
				
				
				
				<xsl:variable name="binData">
					<xsl:copy-of select="/*[local-name()='Envelope']/*[local-name()='Body']/*[local-name() = $methodName]//*[local-name() = $tagName]/text()"/>
				</xsl:variable>



<xsl:variable name="methodName">
			<xsl:copy-of select="local-name(/*[local-name()='Envelope']/*[local-name()='Body']/*)" />
		</xsl:variable>
--------------------
				
				H1B Petition Number: EAC2104750680

UID : 86750593
naveenjangiti@gmail.com

Details

1)Jangiti Naveen Kumar
 DS 160 Confirmation:AA00AB44T1
 DOB : 12-AUG-1979
 Email : naveenjangiti@gmail.com , mail2naveen.de@gmail.com
 Phone: +966 592848721
 (Passport Number :Z5743574, Country of Birth: India, Nationality: India, Place of Issue:Saudi,Riyadh. DOI: 22/8/2021,  DOE: 21/8/2031)

2)Jangiti Radhika
 DS 160 Confirmation:AA00AB3Z6N
 DOB : 09-AUG-1984
 Email : radhika.jangiti@gmail.com , mail2radhika.de@gmail.com
 Phone: +91 9618607169
(Passport Number :N3207693, Country of Birth: India, Nationality: India,Place of Issue:India,Hyderabad. DOI: 29/9/2015,  DOE: 28/9/2025)

3)Jangiti Siva Karthikeya
 DS 160 Confirmation: AA00AB4DL5
 DOB : 02-NOV-2016
 Email : radhika.jangiti@gmail.com 
 Phone: +91 9618607169
(Passport Number :S6484137, Country of Birth: India, Nationality: India,Place of Issue:India,Hyderabad. DOI: 29/10/2018, DOE:28/10/2023)
				
=============

<xsl:output method="xml" version="1.0" encoding="UTF-8" indent="yes"/>
	<xsl:template match="/">
		<xsl:variable name="LogTargetSub">
			<xsl:copy-of select="dp:variable('var://service/processor-name')"/>
		</xsl:variable>
		<xsl:variable name="xCode" select="normalize-space(dp:response-header('x-dp-response-code'))" />
		<xsl:message terminate="no" dp:type="{concat($Config:LogCategory,'_',$LogTargetSub)}" dp:priority="debug">Mq return code:<xsl:value-of select="$xCode"/>           			 </xsl:message>
		<xsl:if test="starts-with($xCode, '2') and string-length($xCode)=4">
			<dp:reject>MQ Error with mqrc=<xsl:value-of select="$xCode"/></dp:reject>
		</xsl:if>
		<xsl:copy-of select="dp:variable('var://context/msg/body')"/>
	</xsl:template>
</xsl:stylesheet>
---------
<json:object>
			<json:string name="cod">
				<xsl:value-of select="$errorCode" />
			</json:string>
			<json:string name="msg">
				<xsl:value-of select="$errorMessage" />
			</json:string>
			<json:string name="exc">
				<xsl:value-of select="$exceptionMessage" />
			</json:string>
			<json:null name="errors" />
		</json:object>

<json:string name="_version"><xsl:value-of select="$blueprint-version"/></json:string>

<xsl:when test="$errorCode='0x01130006' or $errorCode='0x01130007' or $errorCode='0x01130008' or $errorCode='0x0113001e' or $errorCode='0x0113001c' ">
								<statusCode>300</statusCode>
								<severity>error</severity>
								<statusDesc><xsl:value-of select="$errorDesc"/></statusDesc>
							</xsl:when>

<xsl:variable name="errorCode" select="dp:variable('var://service/error-code')"/>

----------
https://github.com/ibmArtifacts/Utility_XMLF/blob/9723dc1b752e0630eeb7ce2458fc475edcfeff3f/toJson.js
https://github.com/dan-orangespecs/practical-datapower/blob/80e8bb08698aa6c1af6df4396fcd33afc742c5c0/OSC_PD_Stub/source/local/processError.xslt
------
https://www.saudiarabiavisa.co.uk/pdf/saudi-family-visit-visa-application.pdf
https://gist.github.com/copethomas/9891c9f3f1b226e1e738b4926813974a
------
const contextParts = data.config['context-variable'].substring(6).split('/').slice(1);
--
encData: returns null");
getInAppPayloadJwe input is null");

]!== undefined){
("decryption error"));
---
var responseBody = JSON.stringify(body);
                    if (responseBody.indexOf('encData') != -1) {
                        decrypt(privateKey, body).then(success => {
                            response.body = success;
                            if (response.statusCode === 204) {
                                deferred.resolve({
                                    response: response
                                });
                            } else if (response.statusCode >= 200 

&& response.statusCode <= 299) {
                                deferred.resolve({
                                    response: response,
                                    body: success
                                });
                            } else {
                                deferred.reject({
                                    response: response,
                                    body: body
                                });
                            }

                        })
                            .catch(err => console.log("decryption 

error"));
var hashString = crypto.createHmac('SHA256', sharedSecret).update(preHashString).digest('hex');
===========
	
	
	<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:dp="http://www.datapower.com/extensions" extension-element-prefixes="dp">

	<xsl:include href="./environment.xsl"/>

    <xsl:variable name="orig_content_type" select="dp:variable('var://service/original-content-type')"/>
    
	<xsl:variable name="dp_env">
		<xsl:call-template name="getCurrentEnvironment"/>
	</xsl:variable>	
	
	<xsl:variable name="error_msg">
		<xsl:choose>
			<xsl:when test="not($dp_env = 'PROD') and (dp:variable('var://service/error-subcode') = '0x01d30002' or dp:variable('var://service/error-subcode') ='0x01d30001')"><xsl:value-of select="dp:variable('var://service/error-message')"/> [<xsl:value-of select="dp:variable('var://service/error-code')"/>-<xsl:value-of select="dp:variable('var://service/error-subcode')"/>]</xsl:when>
			<xsl:when test="not($dp_env = 'PROD')">Error connecting to URL '<xsl:value-of select="dp:variable('var://service/URL-out')"/>: '<xsl:value-of select="dp:variable('var://service/error-message') "/>' [<xsl:value-of select="dp:variable('var://service/error-code')"/>-<xsl:value-of select="dp:variable('var://service/error-subcode')"/>]</xsl:when>
			<xsl:otherwise>This request could not be completed.</xsl:otherwise>
		</xsl:choose>
	</xsl:variable>

    <xsl:template match="/">
        <xsl:choose>
            <xsl:when test="contains($orig_content_type,'json')">
          	    <json:object xmlns:json="http://www.ibm.com/xmlns/prod/2009/jsonx">
          			 <json:string name="error" xmlns:json="http://www.ibm.com/xmlns/prod/2009/jsonx">
           	    		 <xsl:value-of select="$error_msg"/>
					</json:string>
                </json:object>   
           </xsl:when>
            <xsl:otherwise>
				<error>
                	<xsl:value-of select="$error_msg"/>
                </error>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    
</xsl:stylesheet>
	
	========
	var urlopen = require('urlopen');
session.input.readAsJSON (function (error, json) {
    if (error) {
      session.output.write(error);
    }
    else{
var options = {
            target: 'https://biztalk-srv1.mol-pdom.gov:1014',
            method: 'POST',
           headers: {  'keyId':'55588','Authorization' : 'Basic UWl3YVVzcjpYeXo3ODkw' },
		   contentType: 'application/json',
           data: json
		   
         //sslClientProfile: 'alice-sslproxy-forward-trusted'
};

urlopen.open(options, function(error, response) {
  if (error) {
    // an error occurred during the request sending or response header parsing
    session.output.write("urlopen error: "+JSON.stringify(error));
  } else {
    // get the response status code
    var responseStatusCode = response.statusCode;
    var responseReasonPhrase = response.reasonPhrase;
    console.log("Response status code: " + responseStatusCode);
    console.log("Response reason phrase: " + responseReasonPhrase);
    // reading response data
    response.readAsJSON(function(error, responseData){
      if (error){
        throw error ;
      } else {
        session.output.write(responseData) ;
      }
    });
  }
});
	}
	
   }});
	========
<xsl:variable name="USER_NAME" select="dp:variable($REQ_USER_NAME_VAR_NAME)"/>
							<dp:set-http-request-header name="$NAME" value="$USER_NAME"/>
https://github.com/SysIntAu/DPDirectServicesFramework/blob/82156805f00271d367d3f39cd93d78999d9a9537/framework-rest-api/src/main/xml/configuration/framework-rest-api/services/common/AddEsbServicesSecurityHeaders.xsl
-------
var outerJSON = {"outside": "On the outside"};

outerJSON.middleJSON = middleJSON;
middleJSON.innerJSON = innerJSON;

session.output.write(outerJSON);
=-------
<xsl:template match="/">
				<xsl:variable name="formatted-error-message" select="dp:variable('var://service/formatted-error-message')"/>
		
				<xsl:copy>
					<dp:parse select="$formatted-error-message"/>
				</xsl:copy>
			
	</xsl:template>
	-----
<xsl:variable name="bin">
				<xsl:choose>
					<xsl:when test="contains(/object/message,$FakeManagerM99)"><xsl:value-of select="substring-before(/object/message,$FakeManagerM99)"/><xsl:value-of select="$ManagerM99"/><xsl:value-of select="substring-after(/object/message,$FakeManagerM99)"/></xsl:when>
					<xsl:otherwise>
						<xsl:value-of select="/object/message"/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:variable>	
			
		<xsl:variable name="msg">					
			<xsl:variable name="binaryMsg">
				<xsl:value-of select="substring($bin, $XMITOffset)"/>
			</xsl:variable>
			<xsl:variable name="b64Msg">
				<xsl:copy-of select="dp:radix-convert($binaryMsg, 16, 64)"/>
			</xsl:variable>		
			<xsl:variable name="result" select="dp:parse($b64Msg, 'base-64')"/>
			<xsl:copy-of select="$result"/>
		</xsl:variable>
---
curl --url "http://127.0.0.1:7783" --data "{"userpass":"$userpass","method":"electrum","coin":"KMD","ipaddr":"electrum1.cipig.net","port":10001}"

---------

var jose = require('jose');
var jwt = require('jwt');
var hm = require('header-metadata');

var requestid = session.parameters.requestid;
var appid = session.parameters.appid;
var uuid = session.parameters.uuid;
var clientIP = session.parameters.clientIP;

var claims = {
    'iat': new Date().getTime() - 1000, //system date - 1s
   'exp': (new Date().getTime()) + 3000000, // expire in 300 s
  //   'exp': (new Date().getTime()) + 31104000000, // expire 12 months
   //   'exp': (new Date().getTime()) + 5184000000, // expire 2 months
    'iss': 'auretailshvdptst.dev.anz',
      'aud': 'https://cspuiuat.service.dev/',
	'ANZ-Application-ID': appid,
	'ANZ-Application-Version':'1.0', 
	'ANZ-Request-ID': requestid,
	'ANZ-Source-IP': clientIP,
	
    'context': {
        'user': {
                   'id': uuid,  
                   'type': 'UUID'    
            
        }
    }
}; 


// use RS256 algorithm and crypto key to sign
var jwsHeader = jose.createJWSHeader('Auretailsh_Key_Server', 'RS256');
jwsHeader.setProtected({'typ': 'JWT'});
var encoder = new jwt.Encoder(claims);

encoder.addOperation('sign', jwsHeader)
    .encode(function(error, token) {
        if (error) {
            session.output.write('error creating JWT: ' + error);
        } else {
            // write the JWT token to output
            //session.output.write(token);
            var Bear = 'Bearer' + ' ' + token;
            hm.current.set('JWT-Token', Bear);
            var Bear = 'Bearer' + ' ' + token;
            hm.current.set('Authorization', Bear);
        }
    });
----------
if (!session.parameters.BaseURL) session.parameters.BaseURL = 'http://localhost'; 			// default base-url (if wasn't configured).
if (!session.parameters.Timeout) session.parameters.Timeout = 30; 					// default timeout (in seconds).
var sm = require('service-metadata');
var hm = require('header-metadata');
var urlopen = require('urlopen');

sm.setVar('var://service/mpgw/skip-backside', true);

session.input.readAsBuffer(function (error, buffer){
	if (error) {
		hm.response.statusCode = '500 Internal Server Error';
		session.output.write({'status': 'error', 'message': hm.response.reasonPhrase});
		throw error;
-------------
<xsl:template match="/">
		<!-- Load the service manifest file -->
		<dp:set-variable name="'var://service/mpgw/skip-backside'" value="1"/>
		<xsl:copy-of select="."/>
	</xsl:template>
--------

<xsl:template match="/">
		<dp:set-http-request-header name="'MQMD'" value="''"/>
		<dp:set-http-request-header name="'MQRFH2'" value="''"/>
		<dp:set-http-request-header name="'X-MQRFH2-Data-0'" value="''"/>
		<dp:set-http-request-header name="'X-MQRFH2-Data-1'" value="''"/>
		<xsl:copy-of select="."/>
	</xsl:template>

----------
 <dp:set-http-request-header name="'content-type'" value="'application/xml'" />
        <dp:set-http-response-header name="'content-type'" value="'application/xml'" />
        <dp:set-http-request-header name="'accept'" value="'application/xml'" />
        <dp:set-http-response-header name="'accept'" value="'application/xml'" />




<td><xsl:value-of select="./*[local-name()='ResourceName']"/></td>

select="*[local-name()='item']"/>

<xsl:value-of select="local-name()"/>

<xsl:value-of select="local-name(.)"/>

<xsl:template match="fm:Changelog-URL">
  <xsl:value-of select="local-name(.)"/>
  <xsl:text>: </xsl:text>
--------
<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    version="1.0"
    xmlns:xalan="http://xml.apache.org/xslt"
    xmlns:dpedu="http://dpedu.ibm.com" >
    <xsl:output method="html" />

    <xsl:template match="/">
<html>
<head>
<title>Address Information</title>
</head>
<body>
<table width="80%" border="0">
<tbody>
<xsl:apply-templates select="//dpedu:name" />
</tbody>
</table>
</body>
</html>
    </xsl:template>
    
    <xsl:template match="dpedu:name">  	
	    
	    <xsl:choose>
				<xsl:when test="dpedu:title/text()='Mr.' and dpedu:firstName/text()='John' and dpedu:lastName/text()='Doe'">
		<tr>
			<td width="20%">Name</td>
			<td width="80%"></td>
		</tr>
		<tr>
==============
var urlopen = require ('urlopen');
var hm = require('header-metadata');
var options = {
	target: 'https://api.ciscospark.com/v1/people/me',
	sslClientProfile: 'SSL_Spark_Cert',
	method: 'get',
	headers: {"Authorization":"Bearer NDgzN2M5MDYtY2VkNi00N2EwLWIwYjctZDQxODQ0Nzg2YTkwMmRjYTAxYzMtZmVk"}
};


urlopen.open (options, function (error, response) {
	if (error) {
		session.output.write ("urlopen connect error: " + JSON.stringify(error));
	} else {
		var responseStatusCode = response.statusCode;
		if (responseStatusCode == 200) {
			response.readAsJSON(function(error, responseData) {
				if (error) {
					session.output.write("readAsBuffer error: " + JSON.stringify(error));
				} else {
					session.output.write(responseData);
					hm.current.set('Content-Type', 'application/json');

				}	 
			});
		} else {
			session.output.write ("urlopen target return statusCode " + responseStatusCode);
		}
}
});

-------------

/ Parse the JWE representation to extract the serialized\
                \ values for\r\n            // the components of the JWE.  Returns\
                \ an instance of JWEObject\r\n            // through which you can\
                \ access the JWE content.\r\n            var jweObj = jose.parse(jweCompactObj);\r\
                \n            console.error('JSON.stringify(jweObj) : ' + JSON.stringify(jweObj));\r\
                \n\r\n            // Set key configuration object to process the encrypted\
                \ key\r\n            var sharedkey = JSON.parse(apim.getvariable('shared-key01'));\r\
                \n            jweObj.setKey(jwk.toBuffer(sharedkey));\r\n        \
                \    \r\n            // The decrypt will only be attempted if key\
                \ has been specified\r\n            jose.createJWEDecrypter(jweObj).decrypt(function(error,\
                \ plaintext) {\r\n                if (error) {\r\n               \
                \     // An error occurred during the decrypt process and is passed\
                \ back\r\n                    // via the error parameter since .decrypt\
                \ is an asynchronous call\r\n                    // write the error\
                \ to the output context\r\n                    session.reject(error);\r\
                \n                    return;\r\n                } else {\r\n    \
                \                // since the decryption was successful you can write\

==========
Section 7. Test the JSON serialized JWE generation
curl --data-binary @RefnumLastnameRequest.txt http://192.168.1.75:13001/EncryptBodyJSON > EncryptedBodyJSONJWE.txt
- returns
{"recipients":[{"header":{"kid":"Emi"},"encrypted_key":"XE6Ai12VBtWxXcO0LHD558CpE3DoN9o1udBc3f9U4JjfOhJVbViDmpODNuu8zsbeYOwCb26YLCpv1i7sxT1GCATZpJoa0VOCl08axjR9F_TSMfdyvknXBCmiT1d3Oq-dFB-Dcj_Auty47YGjR86y-W6Mum4gdriWGSyAbDRHjDurax4XrWd9E5PUC4YwZ8VYC72yFKeuOga53prAqSCfHIx1kEci4M0UM06NdygkVY9X7y_l4Rs-_XGExebFsDOgctVp1Tb8vifRgkcXlFlQXs4pmjNLXejYfpOS4xsnhsG_tsNx2UzgdsjfPiSX9ray08E2o6gBqNsD6ZCtWGmgvQ"}],"protected":"eyJlbmMiOiJBMTI4Q0JDLUhTMjU2IiwiYWxnIjoiUlNBMV81In0","ciphertext":"LI-voLRjxU5JvZwjzaQ0c2bUf40objeCAk_hyT_-u6rXbDMEvfDXj8hA5uFj1lpoR8osVILtagtOODowKlhBqA","iv":"lDI3J_pVOBQyC9I4efaTgA","tag":"j6bCqYR0Eh70yrw04Cbiww"}
"The protected header decodes as “{"enc":"A128CBC-HS256","alg":"RSA1_5"}”, is actually the "protected" value.


========

// XML input converted to JSON output extracting XML components using XPath function.
// This demonstrates GatewayScript (ECMA) XML to JSON.
// Author: Steve Edwards, Escala Ltd.
// Date  : 2015-11-17.
// Note  : this code is for demonstration purposes only, not production - level.
// Read the input as XML document

var transform = require('transform');

session.input.readAsXML(function (error, doc) {
	  if (error) {
	    // handle error
	    session.output.write (error.errorMessage);
	  }
	  else {
		  var options = {
				  'expression': '//ns1:book[1]/ns1:title/text()',
	              'xmldom': doc,
	              'namespace': { 'ns1': 'http://publisher.com/books' }
	      };           
		  transform.xpath(options, function(err, xmlNodeList) {
			  if (err) {
				  session.out.write(err);
			  }
			  else {
				  //  xmlNodeList = 'JavaScript'
				  var json_output = {};
				  var option = { omitXmlDeclaration: true } ;
				  json_output.firstTitle = XML.stringify(option, xmlNodeList);
				  // {"firstTitle": "JavaScript"}
				  session.output.write(json_output);
			  }
		  });
	  }
});
/*
<books xmlns="http://publisher.com/books">
    <book><title>JavaScript</title><price>22.99</price></book>
    <book><title>XSLT</title><price>35</price></book>
</books>

curl -d '<books xmlns="http://publisher.com/books"><book><title>JavaScript</title><price>22.99</price></book><book><title>XSLT</title><price>35</price></book></books>' http://192.168.1.72:8082/xpath-transform
Output: {"firstTitle":"JavaScript"}
*/
----------
visa  encrypt


var jose = require('jose');
// get the input from the request
session.input.readAsBuffer(function(readAsBufferError, jsonData) {
	if (readAsBufferError) {
		console.error('Error on readAsBuffer: ' + readAsBufferError);
	} else {
		var plaintext = jsonData;
		try {
			// Create JWE header that specifies content encryption algorithm
			var jweHdr = jose.createJWEHeader('A128CBC-HS256');
			// Add first recipient, identifying the cert object name, and
			// encryption algo for the CEK, and JSON object with "kid" for Emi 
			var EmiKidHdr = {"kid":"Emi"};
			jweHdr.addRecipient('Emi-cert', 'RSA1_5', EmiKidHdr);
			// Add second recipient
			var ErinKidHdr = { "kid":"Erin"};
			jweHdr.addRecipient('Erin-cert', 'RSA-OAEP', ErinKidHdr);
			// Create JWEEncrypter, load it with the plaintext, encrypt it
			// formatted as JSON serialized
			jose.createJWEEncrypter(jweHdr).update(plaintext).encrypt(
					'json',
					function(error, jweJSONObj) {
						if (error) {
							// An error occurred during the encrypt process
							session.reject(error.errorMessage);
							return;
						} else {
							// Encryption was successful
							console.debug('JSON-serialized object: '
									+ jweJSONObj);
							session.output.write(jweJSONObj);
						}
					});
		} catch (e) {
			session.reject("BuildMultiRecipientJWE.js error: " + e);
			return;
		}
	}
});





----------------


var someJSON = {"hello": "This is", "there": "JSON"};

// Alternative
// var someJSON = new Object();
// someJSON.hello = "This is";
// someJSON.there = "JSON";

session.output.write(someJSON);

/* Sample output:
{
    "hello": "This is",
    "there": "JSON"
}
*/
-------------------

		//print current headers
		var hm = require('header-metadata');
		console.debug("Current headers %j", hm.current.headers);
		
		//print service variables
		console.debug("Input size is:" + sm.inputSize );
		console.debug("Inbound URL:" + sm.getVar('var://service/URL-in') );
		
		//print input JSON message
		console.debug("JSON Request is %s", queryparms);
	}
// construct SOAP request message
session.output.write(
	"<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" "
	+ "xmlns:fly=\"http://www.ibm.com/datapower/FLY/BaggageService/\">" 
	+ "<soapenv:Header/>"
	+ "<soapenv:Body>"
 	+ "<fly:BaggageStatusRequest>"
       	+ "<fly:refNumber>" + refNo + "</fly:refNumber>"
       	+ "<fly:lastName>" + lastName + "</fly:lastName>"
   	+ "</fly:BaggageStatusRequest>"
  	+ "</soapenv:Body>"
	+ "</soapenv:Envelope>"
	);

---------
  <xsl:output method="xml"/>

  <xsl:template match="/">
    <xsl:copy-of select="."/>
  </xsl:template>

</xsl:stylesheet>
-----------
// Read the input as a JSON object and convert to SOAP message
console.debug("Starting BaggageJson2Soap");

session.input.readAsJSON(function(error,json) {
	if (error) {
		// an error occurred when parsing the content, e.g. invalid JSON object
		session.output.write("oops error " + JSON.stringify(error.toString()));
	} else {
		
debugger;
		var refNo = json.refNumber;
		var lastName = json.lastName;
		
		console.info("Received request from %s and referenece number is %i", lastName, refNo);
		
		// Debug level is a stylesheet parameter which is configurable in JS action
		// Check debug level , if debug level is above 5, will print request headers and service variables
		// Default value is 0
		if (!session.parameters.debugLevel) 
			session.parameters.debugLevel = 0;
		if (session.parameters.debugLevel >= 5)
		{
			//print current headers
			var hm = require('header-metadata');
			console.debug("Current headers %j", hm.current.headers);
			
			//print service variables
			var sm = require('service-metadata');
			console.debug("Input size is:" + sm.inputSize );
			console.debug("Inbound URL:" + sm.getVar('var://service/URL-in') );
			
			//print input JSON message
			console.debug("JSON Request is %j", json);
		}
		
		session.output.write(
			"<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" "
			+ "xmlns:fly=\"http://www.ibm.com/datapower/FLY/BaggageService/\">" 
	   		+ "<soapenv:Header/>"
	   		+ "<soapenv:Body>"
	      		+ "<fly:BaggageStatusRequest>"
	         	+ "<fly:refNumber>" + refNo + "</fly:refNumber>"
	         	+ "<fly:lastName>" + lastName + "</fly:lastName>"
	      		+ "</fly:BaggageStatusRequest>"
	   		+ "</soapenv:Body>"
			+ "</soapenv:Envelope>"
		);
	}
});
